#+SETUPFILE: ../styles/SETUP_l2_slides.org
#+TITLE: Software Tools:: Lectures
#+AUTHOR: Dylan Schwilk
* Plain text
:PROPERTIES:
:EXPORT_FILE_NAME: 01-text-editors.pdf
:END:
** Why plain text?
*** Our main goals as scientists
To make our research as reproducible and visible as possible
\pause
**** This entails:
- Sharing of code
- Sharing of data (if possible and not proprietary nor privacy sensitive)
- Sharing of output (presentation, article, website)
*** The power of plain text
- Ubiquitous
- Usually small in size
- Portable across platforms (and versions)
\pause
**** It is scriptable (both as input as output). 
Code is almost always in text format usually data is in text format as well but underlying format for output (presentation, website, tables, articles, books) can be text as well.
*** Manipulation of text
Most output is based on simple text file. There are two main final formats: HTML and PDF.  One is pageless and one is centered on the idea of the printed page.
**** This formatting requires markup-languages
- HTML and CSS
- LaTeX
- Markdown

And others (ReST, org-mode, etc)

** What is plain text?
*** Computers store numbers
- Computers store numbers in binary: 0100110 (38).
- How to represent characters ("A", "f", "%")?
\pause
**** Simple idea: numeric code for each character.  Originated at Bell labs in 1960
- ASCII: American Standard Code for Information Interchange
- 7 bits (128 symbols).
- On modern computers, stored in one byte with zero as first bit.
- For example: ``A'' = 01000001
*** ASCII table
**** 0--31 used for "unprintable" characters (BEEP! page feed, etc).
  #+ATTR_LaTeX: :width 0.9\textwidth 
  [[file:images/800px-ASCII_Code_Chart.png]]
*** All was good
Assuming you were an English speaker.
**** Solution: Extended ASCII
- We have 8 bits!  What about codes 128--255?
- IBM-PC: The "OEM" character set:  European accented characters and drawing characters.
- But everyone had a different idea of what to do with the upper codes.
*** ANSI standard
- Same as ASCII for 0-127
- But different "code pages" for upper set
**** So everything was crazy but ok
As long as you spoke a western language.

In Asia, there was a whole other mess using a mixture of one and two-byte characters.
*** Unicode
Basic idea: two bytes.  Then expanded to more (up to 3 bytes) Enough to store every character in every language.
  - Originally: \(2^{14} = 16,384\)   (2 bits reserved)
  - Currently: 110,182 code points
  - Every letter maps to a "code point" --- a platonic ideal of a character.
  - "A" is different from "a", but "A" in Times New Roman is the same as "A" in Arial
  - For example:
      :"Hello" = U+0048 U+0065 U+006C U+006C U+006F
  - Still the issue of exactly how to STORE the numbers

*** Encodings
There were multiple standards for STORING the numbers.  Original, UCS-2, uses 2  bytes.
Americans were lazy, so:
**** UTF-8
:PROPERTIES:
:BEAMER_act <+->
:END:
- Idea: use one byte for code points 0-127, and only use two for points above that.
- UTF-8 is the de facto standard encoding for unicode.
- Example, an email message header: =Content-Type: text/plain; charset="UTF-8"=

** Working with plain text
*** Why you should love plain text
:PROPERTIES:
:BEAMER_act: [<+->]
:END:
- Portability. Linux, Windows, Mac, Android, etc. *Standard*.
- Easy to use. Don't let a word processor get in you way when you just need to *write*
- Keep content separate from formatting
- Computers love plain text.  Programs are written in plain text.  Use one powerful text editing tool for everything you do.
- Version control: VC systems work best on text files (eg git)
*** What you want in a text editor
- Syntax highlighting
- Braces, parenthesis matching, automatic indenting
- Ability to work with interpreters, shells
- Spell checking

\pause
And some other things you did not know you wanted: TODOs and outlining modes, exporting to HTML or PDF, web browsing, email ...
*** Editors
**** OS agnostic:
- *Emacs* My favorite.  A text editor that includes its own programming language (Elisp).
- For R code: RStudio (runs on Mac, Linux, Windows)
**** Windows:
- *notepad++*.  Nice and lightweight, does what you need. Can syntax highlight R code
**** Mac
- Textwrangler, BBedit
** Emacs
*** Emacs
One editor to rule them all.
*** Why use Emacs? Availability
- All platforms, operating systems
- Will Always Exist (cue music)
- Open source and free
*** Why use Emacs? Best tools
- Emacs has "major modes" for most computer languages and types of files
- Powerful text management tools:
  - Compare (=diff=) documents or buffers
  - Regular expressions
  - Can deal with rectangular text (columns, tables)
- Can handle very large files
** Basics
*** Start Emacs
[[file:images/emacs-simple-start.png]]

1: Menus, 2: Toolbar, 3: Buffer, 4: Mode line (status bar), 5: Mini buffer  
*** What I see:
[[file:images/emacs-schwilk-start.png]]

*** Frames, windows and buffers
- Frame :: What we call a "window" on a modern operating system. One instance can control multiple frames. Try =File -> New Frame=
- Window :: What we would call a "panel." A subdivided part of an Emacs "frame". A way to view multiple buffers at once (eg R code and R console). Try =File -> Split Window=
- Buffer :: A name associated with the contents of a window. Can be the contents of a file, a process, an interpreter. Try =Buffers -> ...=
*** Emacs "Major Modes"
- Emacs can customize itself based on the language you are working in
- R code will look different (font colors, comments etc) from Python from Markdown.
- Emacs will guess the mode from the file extension (eg =.R=), or you can specify mode: Type Alt-x, release, then type valid mode name
*** Emacs key board commands
**** Emacs was created in the days before
- Mice
- Windowing desktop environments
- Microsoft windows or Macs existed.

\pause
**** Everything can be done from keyboard
- C :: Control key
- S :: Shift key
- M :: Meta key (usually "Alt")

*** Keyboard nomenclature
 
- "C-x g" :: hold Control while typing "x", release, then type "g"
- "M-x"  :: Hold down Alt then hit "x".  This brings you to mini-buffer to type longer commands
- "C-c C-c" :: Hold down Control while typing "c" then do that again.

*** That seems complicated
So you don't have to use those keys if you don't want to!

- The keyboard commands are featured in most Emacs tutorials. And that may scare folks away.
- I have a "cheat sheet" of commands taped on the wall next to my computer
- But you can always use the pull down menus and still do more than with any other editor.
*** Just use the menus and keys you are used to
**** Select all:
=Edit -> Select All= vs "C-x h"
\pause
**** End of buffer:
"page down" key a few times vs "M->" (Alt, Shift, greater than)
\pause
**** Moving by character:
arrow keys, "home", "end" vs "C-f", "C-b", "C-n", "C-p", "C-a", "C-e"

*** One problem:
**** You are probably used to MS or Mac cut-copy-paste
| keystroke | result |
|-----------+--------|
| C-x       | cut    |
| C-c       | copy   |
| C-v       | paste  |
| C-z       | undo   |

\pause
**** But Emacs defaults:
| keystroke | result         |
|-----------+----------------|
| C-w       | cut ("wipe")   |
| M-w       | copy           |
| C-y       | paste ("yank") |
| C-/       | undo           |

*** Easily fixed
Turn on "CUA mode", multiple ways:

- =Options -> CUA=
- "M-x cua-mode"
- Add following to emacs startup:  =(cua-mode t)=

Watch out: This overrides some basic Emacs keyboard functionality.  For example, you must turn this off for the built-in Emacs tutorial!
*** Customizing Emacs
- Emacs is an editor built on top of an entire programming language (Emacs lisp).
- When emacs starts it reads a local configuration file (lisp code). Either: =~/.emacs= or =~/.emacs.d/init.el=
*** Some shortcuts you *should* use

- M-x :: execute command in minibufer --- this gives you access to every lisp function
- C-g :: Quit.  Exits a function, exits mini-buffer. Useful if you get stuck 
- C-s :: Forward search.  I use this very frequently
- M-% :: Query replace
- C-M-% :: Regular expression query replace
- M-q :: Rewrap paragraph (does right thing for code comments)
- M-; :: Comment or uncomment selected region; knows which comment character to use

*** More on =M-x=
- "M-x" gets the mini-buffer ready for a command
- Tab completeion works, so just type first few letters

\pause
***** Example: indent-region
- Highlight text ("select region")
- Type "M-x indent-region"
- And emacs even reminds you of shortcut.
** Installing
*** Installing Emacs
**** On linux
~> sudo apt-get install emacs24~
**** On Mac
- OSX: aquamacs: http://aquamacs.org/
*** Install Emacs on Windows 
- go to http://ftp.gnu.org/gnu/windows/emacs/
- Download emacs by right-clicking on either emacs-xx.x-bin-i386.tar.gz or emacs-xx.x-fullbin-i386.tar.gz.
- Extract to zip file to ~C:\Program Files\emacs~
- Add shortcuts to the executable, set the $HOME environment variable(My computer ... Properties ... Advanced
- You will need to learn about environment variables so that emacs can find R, etc.
*** Emacs configuraton
- Emacs is highly customizable.  On startup it reads an initialization file (~/.emacs.d/init.el)
- I have an extensive configuration that sets up emacs for coding in R, Python, C, C++; for writing LaTeX files and making presentations using LaTeX+Beamer, for organizing my life in org-mode, etc. See https://github.com/dschwilk/emacs-config
- I have written a paired-down set of initialization files for you: https://github.com/schwilklab/emacs-starter
*** Installing my emacs-starter
- go to https://github.com/schwilklab/emacs-starter
- read the README.md file
- Download to your .emacs.d directory (=~/.emacs.d=, or =$HOME\.emacs.d\=)
- Learn what I mean by "~" and ~$HOME~ !
*** Some features and departures from defaults
Note that some things are different from the documentation you will find online:
- A nice dark color theme
- Works great as an IDE for R (shift-enter starts an R session, *ESS*
- Basic support for org-mode (outline files, *org-mode*)
- Uses windows cut-copy-paste keys (*cua-mode*).
*** Basic commands                                               :noexport:
| Visiting (opening) and saving files:     | C-x C-f and C-x C-s   |
| Switching between buffers:               | C-x b and C-x C-b     |
| To set the region by keyboard:           | C-SPC                 |
| Killing (cutting) and yanking (pasting): | C-w, C-k, C-y, M-y    |
| Searching forwards and backwards:        | C-s, C-r              |
| Invoking commands by name:               | M-x                   |
| Undo:                                    | C-/                   |
| Canceling half-entered commands:         | C-g                   |
| Getting help                             | C-h (+ m, k, f, or a) |
| Quitting Emacs:                          | C-x C-c               |
* Markup languages
:PROPERTIES:
:EXPORT_FILE_NAME: 02-markup-languages.pdf
:END:
** Markup
*** What is markup?
- Even with unicode, plain text is, well, *plain*
- How do we produce pretty formatted output?
\pause
**** With markup languages
HTML (+CSS), LaTeX, Markdown, org-mode, RMarkdown, ReStructuredText.
** LaTeX
*** LaTeX
- A set of macros around Tex, a markup language invented by Donald Knuth
- A document preparation system and document markup language.
- Defacto standard in academic publishing. Formulae used in HTML pages (e.g., Wikipedia)
\pause
**** But ...
Notation is cumbersome. It is a "heavyweight" markup language. It is geared towards printed (pdf) output where pages matter (eg printed journal articles)
*** A LaTeX example
#+begin_src latex :results none :exports code
\documentclass[12pt]{article}
\begin{document}
\section*{My Paper}
I just discovered that:
\begin{equation} e=mc^2 \end{equation}

\begin{table}[h] \centering
\caption{My table}
\begin{tabular}{lrs}
\hline
Left & right & center \\
\midrule
data & 0.01 & 2.3 \\
\bottomrule
\end{tabular}
\end{table}
\end{document}
#+end_src

*** Result

#+begin_src latex :exports none :file images/latex-example.pdf :booktabs
\pagecolor{white}
\section*{My Paper}
I just discovered that:

\begin{equation}
e=mc^2
\end{equation}

\begin{table}[h]
\centering
\caption{My table}
\begin{tabular}{lrs}
\toprule
Left & right & center \\
\midrule
data & 0.01 & 2.3 \\
\bottomrule
\end{tabular}
\end{table}
#+end_src

#+results:
#+BEGIN_LaTeX
[[file:images/latex-example.pdf]]
#+END_LaTeX


[[file:images/latex-example.pdf]]

*** It isn't as bad as it seems
[[file:images/latex-example-emacs.png]]

*** Ready for submission
[[file:images/latex-paper-output.png]]

** Markdown
*** Still, LaTeX is cumbersome
Alternatives?
\pause
**** Markdown
- Easy to learn http://daringfireball.net/projects/markdown/
- Much more "lightweight" than  LaTeX
\pause
**** Purposes
- LaTeX is for paper --- PDF
- Markdown is for HTML (blogs, wikipedia) --- but sneakily uses some Latex when needed
- But with pandoc (http://johnmacfarlane.net/pandoc/), Markdown is becoming language of choice among scientists
- You can even export from markdown to MS Word to keep a collaborator happy.
*** Markdown example
#+begin_example

## My Paper ##

I just discovered that:

$$e=mc^2$$

### My Table ###

| Left | right | center |
|------|-------|--------|
| data | 0.01  | 2.3    |

#+end_example
*** Which renders as

[[file:images/markdown-simple-example.png]]

*** Text markup

#+begin_example
*italic*, **bold**

unordered list:
- item 1
- item 2
- item 3

Ordered list:
1. item 1
2. item 2
3. item 3
#+end_example
*** Headings
#+begin_example
Heading1
========

# Heading1 #

Heading2
--------

## Heading 2 ##

### Heading 3 ###
#+end_example
*** Markdown links
#+begin_example
Links:

http://daringfireball.net/projects/markdown/syntax
[Markdown syntax](http://daringfireball.net/projects/markdown/syntax)
[Markdown syntax][mkdn]

[mkdn]: http://daringfireball.net/projects/markdown/syntax
#+end_example
*** Markdown math
Just use LateX math!

#+name: latex-math
#+begin_src latex :exports both
$$\frac{n!}{k!(n-k)!} = \binom{n}{k}$$
#+end_src


**** Which renders as:
#+results: latex-math
#+BEGIN_LaTeX
$$\frac{n!}{k!(n-k)!} = \binom{n}{k}$$
#+END_LaTeX

*** Markdown math
Inline equations just need a single =$=

#+name: latex-math2
#+begin_src latex :exports both
In ecology, "true" species diversity is: 
$ D_q = \frac{1}{\sqrt[q-1]{\sum_{i=1}^R{p_{i} p_{i}^{q-1}}}}
#+end_src

**** Which renders as

#+results: latex-math2
#+BEGIN_LaTeX
In ecology, true species diversity is: 
$ D_q = \frac{1}{\sqrt[q-1]{\sum_{=i=1}^R{p_{i} p_{i}^{q-1}} } }
#+END_LaTeX

** Managing references
*** BibTeX
A reference database format

- Very versatile and very powerful (most other markup languages work with bibtex as well)
- Free managers, such as bibdesk or mendeley, are now ubiquitous. See also jabbref.  You do not need or want Endnote!
*** Bibtex entry

#+begin_src latex :results silent :exports code
@article{Schwilk+Ackerly-2001,
  title={Flammability and serotiny as strategies: 
         correlated evolution in pines},
  author={Schwilk, Dylan W and Ackerly, David D},
  journal={Oikos},
  volume={94},
  number={2},
  pages={326--336},
  year={2001},
  publisher={Wiley Online Library}
}
#+end_src
*** In Jabref
http://jabref.sourceforge.net/

[[file:images/jabref-example.png]]
*** LaTeX and BibTeX example
#+begin_src latex :results silent :exports code
\section{Introduction} 
Fire has been a powerful disturbance on the global
landscape for hundreds of thousands of years,
promoting traits in plants which confer an
advantage in the presence of fire
\cite{Keeley+Pausas+etal-2011,He+Pausas+etal-2012}.
Understanding variation in fire response
strategies both across and within fire regimes is
a major goal of plant fire ecology
\cite{Bond+vanWilgen-1996, Bellingham-2000,
Schwilk+Ackerly-2001, Keeley+Pausas+etal-2011}.
#+end_src
*** Markdown and BibTeX example
Requires pandoc markdown extensions.
#+begin_example
# Introduction #
Fire has been a powerful disturbance on the global
landscape for hundreds of thousands of years,
promoting traits in plants which confer an
advantage in the presence of fire
[@Keeley+Pausas+etal-2011; @He+Pausas+etal-2012].
Understanding variation in fire response
strategies both across and within fire regimes is
a major goal of plant fire ecology
[@Bond+vanWilgen-1996; @Bellingham-2000;
@Schwilk+Ackerly-2001; @Keeley+Pausas+etal-2011].
#+end_example

** Which markup to use?
*** Which do I use and when:
:PROPERTIES:
:BEAMER_envargs: [<+->]
:END:
- Scientific papers :: LaTeX + BibTex. Outlining in org-mode first. I'm starting to use Markdown for some papers (easy conversion to MS word for collaborators).
- Presentations :: LaTeX + Beamer when I need to control details of format, spacing, placement. Org-mode with export via LaTeX + Beamer otherwise. The source for this lecture is plain org-mode (similar to Markdown) 
- Websites :: Markdown with html and css templates (jekyll, eg http://www.schwilk.org) or org-mode export (eg http://r-research-tool.schwilk.org/)
- Documentation, notes, literate programming: org-mode or markdown

*** Pandoc
So how do we glue everything together and produce wonderful htmls and pdfs out of thin air? 

\pause
With pandoc: http://johnmacfarlane.net/pandoc/
\pause
***** pandoc
- Pandoc can convert from :: markdown, LaTeX, HTML, DocBook, Org-mode, and ... Microsoft Word .docx
- To :: HTML formats (including HTML5 slides), via Latex to pdf, MS Word (but support somewhat limited) and OpenOffice formats, various markup formats, and much more

** Scientific workflow
*** An RMarkdown workflow
Figure from Kieran Healy: http://kieranhealy.org/resources/

 #+ATTR_LATEX: :width \textwidth
[[file:images/Healy-workflow-wide.png]]

* Emacs: R and reproducible research
:PROPERTIES:
:EXPORT_FILE_NAME: 03-emacs-R.pdf
:END:
** R in Emacs
*** Work in R
- Emacs knows about R syntax
- Use shift-enter to start up R (or =M-x R=)
- Shift-enter sends one line of code to R, =C-c M-r= sends the region
#+ATTR_LaTeX: :width \textwidth 
[[file:images/ess-example.png]]
*** Moving around
- C-M-a :: ess-beginning-of-function
- C-M-e :: ess-end-of-function
*** Comments and indentation
- comment-region (C-c ;)
- M-x indent-region

Indenting should just work as you type.
*** What can I do in R?
- Run commands as normal.
- TAB Completion of functions, objects, filenames.
- At the prompt, recall history:
  - keybinding function
  - M-p (or C-up) previous input
  - M-n (or C-down) next input
  - M-r comint-previous-matching-input

And look at ESS menu
** Reproducible research
*** Literate programming and reproducible research
Combine text and code

- knitr :: http://yihui.name/knitr/. R package. Mix text and code and "knit" to output.  Can work with LaTeX (*.rnw files) and with RMarkdown (*.Rmd). Can work with emacs or with RStudio
- org-mode :: My favorite (but more emacs-specific). Can do a ton of stuff, including interspersing source code blocks, code output (including graphs) and text.

*** RMarkdown and knitr
=knitr= is an R package that can interpret .rnw files (LaTeX) or RMarkdown files (.Rmd) with R code blocks and "knit" them into LaTeX or markdown (.md) files that can be processed to html, pdf, etc (eg with pandoc)
*** RMarkdown example:
#+begin_example
RMarkdown example
=================

## some code
```{r mpg-data-plot, fig.width=4, fig.height=4}

library(ggplot2)
qplot(displ, hwy, data=mpg)

```
# Another heading
Some data:
```{r}
head(mpg)
```
#+end_example
*** Result:
#+ATTR_LaTeX: :width 0.65\textwidth
[[file:images/rmarkdown-example.png]]
*** Text and code in org-mode
TODO
* Emacs: org-mode
** What is org-mode?
*** What is org-mode?
"Org is a mode for keeping notes, maintaining TODO lists, and doing project planning with a fast and effective plain-text system. " - [[http://orgmode.org/manual/Summary.html]]
**** org-mode is
- an outline extension with visibility cycling and structure editing
- an plain text system and table editor for taking structured notes
- a TODO list editor
- a full agenda and planner with deadlines and work scheduling
- a hypertext system, with HTML and LaTeX export
- an environment for literate programming with code blocks an manipulation of code outputs
*** org-mode outlines
Folding outlines and lists:

[[file:images/org-mode-example1.png]]
*** org-mode examples
- Outlines
- Adding tasks
- Agenda view
- Exporting to HTML or LaTeX
* Version Control
** What is version control?
*** Why use version control?
**** You already use some sort of version control
- File naming schemes (/eg/ ~my-file-July18-2013.doc~) or by copying folders around
- Simple but error-prone
- Does not help with branching, collaboration

\pause
**** A version control system (VCS) allows you to:
- revert files back to a previous state
- revert the entire project back to a previous state
- review changes made over time
- see who last modified something that might be causing a problem, who introduced an issue and when

*** Local version control systems (VCS)
#+ATTR_LaTeX: :width 0.5\textwidth
[[file:images/local-vc.png]]
see http://git-scm.com/book/
*** Centralized VCS
#+ATTR_LaTeX: :width 0.5\textwidth
[[file:images/central-vc.png]]

*** Distributed VCS
#+ATTR_LaTeX: :width 0.5\textwidth
[[file:images/distributed-vc.png]]

** git
*** git: distributed version control
**** git states                                                    :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.6
:END:
#+ATTR_LaTeX: :width \textwidth
[[file:images/git-states.png]]
**** git commands                                                  :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:END:
 - git init
 - git add
 - git status
 - git log
 - git commit
*** Getting started

#+begin_example
git config --global user.name "Dylan Schwilk"
git config --global user.email "dylan@schwilk.org" 
#+end_example
*** Getting a "repo" (repository)

Move to empty directory
#+begin_example
git init
touch README.md
#+end_example
*** What happened?
Hidden directory called =.git=
\tiny
#+begin_example
.
├── .git
│   ├── branches
│   ├── config
│   ├── description
│   ├── HEAD
│   ├── hooks
│   │   ├── applypatch-msg.sample
│   │   ├── commit-msg.sample
│   │   ├── post-update.sample
│   │   ├── pre-applypatch.sample
│   │   ├── pre-commit.sample
│   │   ├── prepare-commit-msg.sample
│   │   ├── pre-push.sample
│   │   ├── pre-rebase.sample
│   │   └── update.sample
│   ├── info
│   │   └── exclude
│   ├── objects
│   │   ├── info
│   │   └── pack
│   └── refs
│       ├── heads
│       └── tags
└── README.md
#+end_example
*** Checking status

#+begin_example
git status
#+end_example

#+begin_example
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        README.md

nothing added to commit but untracked files present (use "git add" to track)
#+end_example
*** Staging files

#+begin_example
git add .
git status
#+end_example

#+begin_example
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   README.md
#+end_example
*** Committing changes
#+begin_example
git commit -m "initial commit"
git status
#+end_example

#+begin_example
On branch master
nothing to commit, working directory clean
#+end_example
*** What exists now?
[[file:images/git-filesystem2.png]]
*** Clone repo
\tiny
#+begin_example
git clone https://github.com/schwilklab/protocols.git
cd protocols
ls
#+end_example

#+begin_example
chiller               conductance-protocol.md  field-work-checklist.md    README.md
code                  data-management.md       gravimetric-soil-water.md  scripts
computers-network.md  electrolyte-leakage.md   lab-business.md            stem-staining.md
#+end_example
*** A basic workflow
- Edit files
- Stage the changes (git add)
- Review the changes (git diff)
- Commit the changes (git commit)
*** The git repository
#+headers:  :file plots/git-repo-diagram.png :fit yes
#+headers: :imagemagick yes :iminoptions -density 1200 :imoutoptions -geometry 600
#+begin_src latex :exports none :noweb yes :headers '("\\usepackage{tikz}")
\begin{tikzpicture}[snode/.style={draw=gray, fill=green, thick, text centered, rounded corners, minimum width=3.5cm}]
\definecolor{green}{RGB}{143,178,143} % #8fb28f
\definecolor{orange}{HTML}{FFB272}
\definecolor{yellow}{HTML}{F0DFAF}
\definecolor{blue}{HTML}{8EF5E6}

\node[snode]              (wd)    at (0, 2)  {Working directory};
\node[snode, fill=orange] (index) at (0, 1)  {Index (staging)};
\node[snode, fill=blue]   (repo)  at (0, 0)  {Repository};

\path[->,thick, gray, text=yellow]  (wd.west) edge [out=180, in=180] node[left=0cm] {git add} (index.west) ;
\path[->,thick, gray, text=yellow]  (index.east) edge [out=0, in=0] node[right=0cm] {git commit} (repo.east) ;
\end{tikzpicture}
#+end_src 

#+results:
#+BEGIN_LaTeX
[[file:plots/git-repo-diagram.png]]
#+END_LaTeX

#+ATTR_LaTeX: :width .6\textwidth
[[file:plots/git-repo-diagram.png]]
** Working smarter
*** Branches
*** Merge
*** Merge vs rebase
*** git and GitHub

* ssh and rsync

